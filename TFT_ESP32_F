#include <TFT_eSPI.h>
#include <L298N.h>
#include <Wire.h>


// ---------- Motor ----------
const unsigned int IN1 = 25;
const unsigned int IN2 = 26;
const unsigned int EN = 27;
const int botonPin = 32;
L298N motor(EN, IN1, IN2);
int velocidad = 0;
const int velocidadMax = 255;


unsigned long ultimaActualizacion = 0;
const int incrementoIntervalo = 100;
unsigned long ultimaLecturaBoton = 0;
bool botonPresionado = false;


// ---------- Pantalla ----------
TFT_eSPI tft = TFT_eSPI();
int lastNeedleAngle = -131;
int lastDrawnSegment = -131;
#define MIC_PIN 34
#define LED_PIN 14




#define PWM_CHANNEL 0
#define PWM_FREQ 5000
#define PWM_RESOLUTION 8


#define SLAVE_ADDRESS 0x08
int d1;
int d2;
// Estructura simplificada (sin temperatura)
typedef struct {
  float distance1;
  float distance2;
} SensorData;


SensorData receivedData;




void setup() {
  Serial.begin(115200);


  // Motor
  pinMode(botonPin, INPUT_PULLUP);
  motor.setSpeed(0);
  motor.stop();


  // TFT
  tft.init();
  tft.setRotation(0);
  tft.fillScreen(TFT_BLACK);


 
  Wire.begin(SLAVE_ADDRESS);
  Wire.onReceive(receiveEvent);




  //LED CON SONIDO
  analogReadResolution(12); // Lectura de 0 a 4095




  ledcSetup(PWM_CHANNEL, PWM_FREQ, PWM_RESOLUTION);
  ledcAttachPin(LED_PIN, PWM_CHANNEL);
}


void loop() {
  // Antirrebote del botón
  bool lecturaActual = digitalRead(botonPin) == LOW;
  unsigned long tiempoActual = millis();


  if (lecturaActual != botonPresionado && tiempoActual - ultimaLecturaBoton > 50) {
    botonPresionado = lecturaActual;
    ultimaLecturaBoton = tiempoActual;
  }


  // Actualiza velocidad
  if (tiempoActual - ultimaActualizacion >= incrementoIntervalo) {
    if (botonPresionado && velocidad < velocidadMax) {
      velocidad += 1;
    } else if (!botonPresionado && velocidad > 0) {
      velocidad -= 5;
    }


    motor.setSpeed(velocidad);
    if (velocidad > 0) motor.forward();
    else motor.stop();


    ultimaActualizacion = tiempoActual;
  }


  // Aguja del velocímetro
  int angle = map(velocidad, 0, velocidadMax, -130, 130);
  if (angle != lastNeedleAngle) {
    updateMeter(lastNeedleAngle, angle);
    drawNeedle(lastNeedleAngle, angle);
    lastNeedleAngle = angle;
  }


  drawSpeedText(velocidad);  // <-- NUEVA LÍNEA




  // Pinta esquinas si es necesario
  if (d1 != 0) drawCornerGradient(0, d1); // Izquierda
  if (d2 != 0) drawCornerGradient(1, d2); // Derecha




//LED CON SONIDO


  int peak = 0;
  const int samples = 100;




  for (int i = 0; i < samples; i++) {
    int val = analogRead(MIC_PIN);
    int amplitude = abs(val - 2048); // Detecta desviación del centro




    // Solo nos interesan amplitudes fuertes (filtros)
    if (amplitude > peak) {
      peak = amplitude;
    }
    delayMicroseconds(100);
  }




  //  Ignorar sonidos débiles
  if (peak < 500) peak = 0;  // Ajusta este umbral según tu música




  //  Escala solo los picos fuertes
  int brightness = map(peak, 500, 2000, 0, 255);
  brightness = constrain(brightness, 0, 255);




  ledcWrite(PWM_CHANNEL, brightness);


  delay(20);
}


// ---------- Visualización ----------
void updateMeter(int oldAngle, int newAngle) {
  int cx = tft.width() / 2;
  int cy = tft.height() / 2;
  float r1 = min(cx, cy) - 40.0;
  float r2 = min(cx, cy) - 10.0;
  int w1 = r1 / 25;
  int w2 = r2 / 20;
  float px1, py1, px2, py2;


  if (newAngle > lastDrawnSegment) {
    for (int angle = lastDrawnSegment + 1; angle <= newAngle; angle++) {
      if (angle % 10 != 0) continue;
      getCoord(cx, cy, &px1, &py1, &px2, &py2, r1, r2, angle);
      uint16_t color = rainbow(map(angle, -130, 130, 0, 127));
      tft.drawWedgeLine(px1, py1, px2, py2, w1, w2, color, TFT_BLACK);
    }
    lastDrawnSegment = newAngle;
  } else if (newAngle < lastDrawnSegment) {
    for (int angle = lastDrawnSegment; angle > newAngle; angle--) {
      if (angle % 10 != 0) continue;
      getCoord(cx, cy, &px1, &py1, &px2, &py2, r1, r2, angle);
      tft.drawWedgeLine(px1, py1, px2, py2, w1, w2, TFT_BLACK, TFT_BLACK);
    }
    lastDrawnSegment = newAngle;
  }


  tft.fillSmoothCircle(cx, cy, r1 - 8, TFT_MAROON, TFT_BLACK);
}


void drawNeedle(int oldAngle, int newAngle) {
  if (oldAngle == newAngle) return;


  int cx = tft.width() / 2;
  int cy = tft.height() / 2;
  float r1 = min(cx, cy) - 40.0;
  float px1, py1, px2, py2;


  getCoord(cx, cy, &px1, &py1, &px2, &py2, 0, r1 - 10, oldAngle);
  tft.drawWedgeLine(cx, cy, px2, py2, 6, 0, TFT_MAROON, TFT_MAROON);


  getCoord(cx, cy, &px1, &py1, &px2, &py2, 0, r1 - 10, newAngle);
  tft.drawWedgeLine(cx, cy, px2, py2, 5, 0, TFT_WHITE, TFT_MAROON);
}


#define DEG2RAD 0.0174532925
void getCoord(int16_t x, int16_t y, float *xp1, float *yp1, float *xp2, float *yp2, int16_t r1, int16_t r2, float a) {
  float sx = cos((a - 90) * DEG2RAD);
  float sy = sin((a - 90) * DEG2RAD);
  *xp1 = sx * r1 + x;
  *yp1 = sy * r1 + y;
  *xp2 = sx * r2 + x;
  *yp2 = sy * r2 + y;
}


unsigned int rainbow(byte value) {
  byte red, green, blue;
  byte quadrant = value / 32;


  if (quadrant == 0) {
    blue = 31; green = 2 * (value % 32); red = 0;
  } else if (quadrant == 1) {
    blue = 31 - (value % 32); green = 63; red = 0;
  } else if (quadrant == 2) {
    blue = 0; green = 63; red = value % 32;
  } else {
    blue = 0; green = 63 - 2 * (value % 32); red = 31;
  }


  return (red << 11) + (green << 5) + blue;
}


// ---------- Nueva función para pintar esquinas ----------
// ---------- Nueva función para pintar esquinas con parpadeo ----------
void drawCornerGradient(int corner, int level) {
  static unsigned long lastBlinkTime[2] = {0, 0};  // Una por esquina
  static bool visible[2] = {true, true};


  unsigned long now = millis();
  int interval;


  // Determina el intervalo de parpadeo según el nivel
  switch (level) {
    case 1: interval = 1000; break; // Verde - lento
    case 2: interval = 500; break;  // Amarillo - medio
    case 3: interval = 200; break;  // Rojo - rápido
    default: return;
  }


  if (now - lastBlinkTime[corner] >= interval) {
    visible[corner] = !visible[corner];  // Alterna visibilidad
    lastBlinkTime[corner] = now;
  }


  int size = 40;


  // Limpia la esquina si no se debe mostrar
  if (!visible[corner]) {
    for (int i = 0; i < size; i++) {
      if (corner == 0) {
        tft.drawFastHLine(0, i, size - i, TFT_BLACK); // Izquierda
      } else if (corner == 1) {
        tft.drawFastHLine(tft.width() - (size - i), i, size - i, TFT_BLACK); // Derecha
      }
    }
    return;
  }


  // Color según nivel
  uint16_t color;
  switch (level) {
    case 1: color = TFT_GREEN; break;
    case 2: color = TFT_YELLOW; break;
    case 3: color = TFT_RED; break;
  }


  // Dibuja el degradado
  for (int i = 0; i < size; i++) {
    uint16_t faded = tft.alphaBlend(255 - (i * 5), color, TFT_BLACK);
    if (corner == 0) {
      tft.drawFastHLine(0, i, size - i, faded); // Izquierda
    } else if (corner == 1) {
      tft.drawFastHLine(tft.width() - (size - i), i, size - i, faded); // Derecha
    }
  }
}




















void drawSpeedText(int velocidad) {
  static int lastVelocidad = -1;
  if (velocidad == lastVelocidad) return;  // No redibujar si no cambió


  lastVelocidad = velocidad;


  // Convertimos la velocidad (0-255) a una escala de 0 a 200 KM/H por ejemplo
  int kmh = map(velocidad, 0, 255, 0, 200);


  // Texto centrado abajo
  tft.setTextDatum(MC_DATUM);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextSize(3);


  int y = tft.height() - 20;  // Cerca del borde inferior
  tft.drawString(String(kmh) + " KM/H", tft.width() / 2, y);
}








void receiveEvent(int bytesReceived) {
  // Esperamos exactamente 9 bytes (header + 4 + 4)
  if (bytesReceived == 9) {
    byte header = Wire.read();
   
    if (header == 0xAA) {
      // Leer distancia 1 (4 bytes)
      Wire.readBytes((byte*)&receivedData.distance1, 4);
     
      // Leer distancia 2 (4 bytes)
      Wire.readBytes((byte*)&receivedData.distance2, 4);
     
      printReceivedData();
    } else {
      Serial.println("Error: Cabecera incorrecta");
    }
  } else {
    Serial.print("Error: Tamaño incorrecto (");
    Serial.print(bytesReceived);
    Serial.println(" bytes)");
  }
}




void printReceivedData() {


  d1=receivedData.distance1;


 
  d2=receivedData.distance2;
}
